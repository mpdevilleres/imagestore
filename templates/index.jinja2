<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Image Renderer</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }

        form {
            margin-bottom: 20px;
        }

        label {
            margin-right: 10px;
        }

        input, select {
            margin-right: 20px;
        }

        #image-container {
            margin-top: 20px;
            display: none;
            background-color: white;
        }

        #rendered-image {
            max-width: 100%;
            height: auto;
            display: none;
        }
    </style>
</head>
<body>

<h1>Render Image from API</h1>

<form id="image-form">
    <label for="depth_min">Depth Min:</label>
    <input type="number" id="depth_min" name="depth_min" required>

    <label for="depth_max">Depth Max:</label>
    <input type="number" id="depth_max" name="depth_max" required>

    <label for="colormap">Colormap:</label>
    <select id="colormap" name="colormap">
        <option value="viridis">viridis</option>
        <option value="plasma">plasma</option>
        <option value="inferno">inferno</option>
        <option value="magma">magma</option>
    </select>

    <button type="submit">Submit</button>
</form>

<div id="image-container">
    <img id="rendered-image" src="" alt="Rendered Image">
</div>

<script>
    // Handle form submission
    document.getElementById('image-form').addEventListener('submit', function (event) {
        event.preventDefault(); // Prevent the default form submission

        // Get the image element and image container
        const imgElement = document.getElementById('rendered-image');
        const imageContainer = document.getElementById('image-container');

        // Hide the image container and image during the fetch request
        imageContainer.style.display = 'none';
        imgElement.style.display = 'none';

        // Clear the previous image's src
        imgElement.src = '';

        // Get form values
        const depthMin = document.getElementById('depth_min').value;
        const depthMax = document.getElementById('depth_max').value;
        const colormap = document.getElementById('colormap').value;

        // Build the query string
        const queryParams = new URLSearchParams({
            depth_min: depthMin,
            depth_max: depthMax,
            colormap: colormap
        });

        // Fetch the image from the API
        fetch(`/frames?${queryParams.toString()}`)
            .then(response => response.json())
            .then(data => {
                if (data.image_base64) {
                    // Set the image source to the base64 data
                    imgElement.src = `data:image/png;base64,${data.image_base64}`;

                    // Show the image container when the image has fully loaded
                    imgElement.onload = function () {
                        imageContainer.style.display = 'block';
                        imgElement.style.display = 'block';
                    };
                } else {
                    alert('No image data received.');
                }
            })
            .catch(error => {
                console.error('Error fetching the image:', error);
                alert('An error occurred while fetching the image.');
            });
    });
</script>

</body>
</html>